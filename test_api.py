#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ BOM
"""

import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:5001"

def test_login():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    response = requests.post(f"{BASE_URL}/api/auth/login", json=login_data)
    
    if response.status_code == 200:
        token = response.json().get('access_token')
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
        return None

def test_routes_api(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("\nüõ£Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    print("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç...")
    route_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏",
        "route_number": f"TR-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
        "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç",
        "status": "draft",
        "estimated_duration": 120,
        "complexity_level": "medium"
    }
    
    response = requests.post(f"{BASE_URL}/api/routes", json=route_data, headers=headers)
    
    if response.status_code == 201:
        route = response.json()
        route_id = route['id']
        print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω! ID: {route_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {route['name']}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ ID
        print(f"üìñ –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –ø–æ ID {route_id}...")
        response = requests.get(f"{BASE_URL}/api/routes/{route_id}", headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {response.status_code}")
        
        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç {route_id}...")
        update_data = {
            "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞",
            "status": "active"
        }
        
        response = requests.put(f"{BASE_URL}/api/routes/{route_id}", json=update_data, headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {response.status_code}")
        
        return route_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {response.status_code} - {response.text}")
        return None

def test_operations_api(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é...")
    operation_data = {
        "name": "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏—è",
        "operation_code": f"OP-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
        "operation_type": "machining",
        "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
        "setup_time": 30,
        "operation_time": 60
    }
    
    response = requests.post(f"{BASE_URL}/api/operations", json=operation_data, headers=headers)
    
    if response.status_code == 201:
        operation = response.json()
        operation_id = operation['id']
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! ID: {operation_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {operation['name']}")
        return operation_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {response.status_code} - {response.text}")
        return None

def test_bom_api(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API BOM"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º API BOM...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ BOM
    print("üìù –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç BOM...")
    bom_data = {
        "part_number": f"BOM-ROOT-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
        "name": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞",
        "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç BOM",
        "quantity": 1.0,
        "unit": "—à—Ç",
        "is_assembly": True,
        "status": "active",
        "material_type": "assembly",
        "cost_per_unit": 1000.0,
        "currency": "RUB"
    }
    
    response = requests.post(f"{BASE_URL}/api/bom/items", json=bom_data, headers=headers)
    
    if response.status_code == 201:
        bom_item = response.json()
        bom_id = bom_item['id']
        print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç BOM —Å–æ–∑–¥–∞–Ω! ID: {bom_id}, –î–µ—Ç–∞–ª—å: {bom_item['part_number']}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        print(f"üìù –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è BOM {bom_id}...")
        child_data = {
            "part_number": f"BOM-CHILD-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
            "name": "–¢–µ—Å—Ç–æ–≤–∞—è –¥–µ—Ç–∞–ª—å",
            "description": "–î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç BOM",
            "parent_id": bom_id,
            "quantity": 2.0,
            "unit": "—à—Ç",
            "is_assembly": False,
            "material_type": "steel",
            "cost_per_unit": 150.0
        }
        
        response = requests.post(f"{BASE_URL}/api/bom/items", json=child_data, headers=headers)
        
        if response.status_code == 201:
            child_item = response.json()
            print(f"‚úÖ –î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω! ID: {child_item['id']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {response.status_code}")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã BOM
        print("üìñ –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É BOM...")
        response = requests.get(f"{BASE_URL}/api/bom", headers=headers)
        
        if response.status_code == 200:
            bom_tree = response.json()
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ BOM –ø–æ–ª—É—á–µ–Ω–∞! –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {bom_tree['total_items']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã BOM: {response.status_code}")
        
        return bom_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ BOM: {response.status_code} - {response.text}")
        return None

def test_list_apis(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–ø–∏—Å–∫–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    print("üìñ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    response = requests.get(f"{BASE_URL}/api/routes", headers=headers)
    
    if response.status_code == 200:
        routes = response.json()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {routes.get('total', 0)}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {response.status_code}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    print("üìñ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π...")
    response = requests.get(f"{BASE_URL}/api/operations", headers=headers)
    
    if response.status_code == 200:
        operations = response.json()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {operations.get('total', 0)}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {response.status_code}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ BOM")
    print("=" * 60)
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    token = test_login()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    route_id = test_routes_api(token)
    operation_id = test_operations_api(token)
    bom_id = test_bom_api(token)
    test_list_apis(token)
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"–°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
    if route_id:
        print(f"  - –ú–∞—Ä—à—Ä—É—Ç ID: {route_id}")
    if operation_id:
        print(f"  - –û–ø–µ—Ä–∞—Ü–∏—è ID: {operation_id}")
    if bom_id:
        print(f"  - –≠–ª–µ–º–µ–Ω—Ç BOM ID: {bom_id}")

if __name__ == "__main__":
    main() 