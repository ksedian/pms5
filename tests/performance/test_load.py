#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ BOM
"""

import pytest
import time
import threading
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed


@pytest.mark.performance
@pytest.mark.slow
class TestRoutesPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    
    def test_create_multiple_routes_performance(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        start_time = time.time()
        created_routes = []
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        
        # –°–æ–∑–¥–∞–µ–º 50 –º–∞—Ä—à—Ä—É—Ç–æ–≤
        for i in range(50):
            data = {
                'name': f'–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {i+1}',
                'route_number': f'TR-PERF-{timestamp}-{i+1:03d}',
                'description': f'–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ #{i+1}',
                'estimated_duration': 120.0 + i * 5.0,
                'complexity_level': 'medium'
            }
            
            response = client.post('/api/routes', 
                                 json=data, 
                                 headers=auth_headers_admin)
            
            assert response.status_code == 201
            created_routes.append(response.json['id'])
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –±–æ–ª–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
        average_time_per_route = total_time / 50
        assert average_time_per_route < 0.5, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {average_time_per_route:.3f}s –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"
        
        print(f"\nüìä –°–æ–∑–¥–∞–Ω–æ 50 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞ {total_time:.2f}s (—Å—Ä–µ–¥–Ω–µ–µ: {average_time_per_route:.3f}s –Ω–∞ –º–∞—Ä—à—Ä—É—Ç)")
    
    def test_routes_list_pagination_performance(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        
        for i in range(100):
            data = {
                'name': f'–ú–∞—Ä—à—Ä—É—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ {i+1}',
                'route_number': f'TR-PAG-{timestamp}-{i+1:03d}',
                'description': f'–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ #{i+1}'
            }
            
            response = client.post('/api/routes', 
                                 json=data, 
                                 headers=auth_headers_admin)
            assert response.status_code == 201
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        start_time = time.time()
        
        for page in range(1, 11):  # –ü–æ–ª—É—á–∞–µ–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            response = client.get(f'/api/routes?page={page}&per_page=10', 
                                headers=auth_headers_admin)
            
            assert response.status_code == 200
            data = response.json
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if 'data' in data:
                assert isinstance(data['data'], list)
                assert len(data['data']) <= 10
            elif 'items' in data:
                assert len(data['items']) <= 10
            else:
                assert isinstance(data, list)
                assert len(data) <= 100  # –ï—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        
        end_time = time.time()
        total_time = end_time - start_time
        average_time_per_page = total_time / 10
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –±–æ–ª–µ–µ 0.2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        assert average_time_per_page < 0.2, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è: {average_time_per_page:.3f}s –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"
        
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ {total_time:.2f}s (—Å—Ä–µ–¥–Ω–µ–µ: {average_time_per_page:.3f}s –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)")
    
    def test_concurrent_route_creation(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        results = []
        errors = []
        
        def create_route(thread_id):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            try:
                data = {
                    'name': f'–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç {thread_id}',
                    'route_number': f'TR-CONC-{timestamp}-{thread_id:03d}',
                    'description': f'–ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –ø–æ—Ç–æ–∫–µ {thread_id}'
                }
                
                response = client.post('/api/routes', 
                                     json=data, 
                                     headers=auth_headers_admin)
                
                return {
                    'thread_id': thread_id,
                    'status_code': response.status_code,
                    'success': response.status_code == 201,
                    'route_id': response.json.get('id') if response.status_code == 201 else None
                }
            except Exception as e:
                return {
                    'thread_id': thread_id,
                    'error': str(e),
                    'success': False
                }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 10 –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(create_route, i) for i in range(1, 11)]
            
            for future in as_completed(futures):
                result = future.result()
                if result.get('success'):
                    results.append(result)
                else:
                    errors.append(result)
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_creations = len(results)
        assert successful_creations >= 8, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏: {len(errors)} –∏–∑ 10"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è ID
        route_ids = [r['route_id'] for r in results if r['route_id']]
        assert len(route_ids) == len(set(route_ids)), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID –º–∞—Ä—à—Ä—É—Ç–æ–≤"
        
        print(f"\nüìä –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: {successful_creations}/10 —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f}s")


@pytest.mark.performance
@pytest.mark.slow
class TestBOMPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è BOM"""
    
    def test_create_deep_bom_hierarchy_performance(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ BOM - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        root_data = {
            'part_number': f'BOM-DEEP-ROOT-{timestamp}',
            'name': '–ö–æ—Ä–Ω–µ–≤–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            'description': '–¢–µ—Å—Ç –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏',
            'is_assembly': True
        }
        
        response = client.post('/api/bom/items', 
                             json=root_data, 
                             headers=auth_headers_admin)
        assert response.status_code == 201
        parent_id = response.json['id']
        
        # –°–æ–∑–¥–∞–µ–º 10 —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å 3 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
        total_items = 1  # –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        
        for level in range(10):
            current_level_items = []
            
            for item_num in range(3):
                item_data = {
                    'part_number': f'BOM-DEEP-L{level}-I{item_num}-{timestamp}',
                    'name': f'–≠–ª–µ–º–µ–Ω—Ç —É—Ä–æ–≤–Ω—è {level}, –ø–æ–∑–∏—Ü–∏—è {item_num}',
                    'parent_id': parent_id,
                    'quantity': 1.0 + item_num,
                    'cost_per_unit': 100.0 + level * 10 + item_num
                }
                
                response = client.post('/api/bom/items', 
                                     json=item_data, 
                                     headers=auth_headers_admin)
                assert response.status_code == 201
                current_level_items.append(response.json['id'])
                total_items += 1
            
            # –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å
            if current_level_items:
                parent_id = current_level_items[0]
        
        end_time = time.time()
        total_time = end_time - start_time
        average_time_per_item = total_time / total_items
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –±–æ–ª–µ–µ 0.3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
        assert average_time_per_item < 0.3, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ BOM: {average_time_per_item:.3f}s –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç"
        
        print(f"\nüìä –°–æ–∑–¥–∞–Ω–æ {total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BOM –∑–∞ {total_time:.2f}s (—Å—Ä–µ–¥–Ω–µ–µ: {average_time_per_item:.3f}s –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç)")
    
    def test_bom_tree_retrieval_performance(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ BOM"""
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É BOM
        root_data = {
            'part_number': f'BOM-TREE-ROOT-{timestamp}',
            'name': '–ö–æ—Ä–Ω–µ–≤–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–µ—Ä–µ–≤–∞',
            'description': '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞',
            'is_assembly': True
        }
        
        response = client.post('/api/bom/items', 
                             json=root_data, 
                             headers=auth_headers_admin)
        assert response.status_code == 201
        root_id = response.json['id']
        
        # –°–æ–∑–¥–∞–µ–º 50 –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(50):
            child_data = {
                'part_number': f'BOM-TREE-CHILD-{timestamp}-{i:03d}',
                'name': f'–î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç {i+1}',
                'parent_id': root_id,
                'quantity': 1.0 + i * 0.1,
                'cost_per_unit': 50.0 + i
            }
            
            response = client.post('/api/bom/items', 
                                 json=child_data, 
                                 headers=auth_headers_admin)
            assert response.status_code == 201
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
        start_time = time.time()
        
        for _ in range(10):  # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ 10 —Ä–∞–∑
            response = client.get(f'/api/bom/{root_id}/tree', 
                                headers=auth_headers_admin)
            
            if response.status_code == 200:
                tree_data = response.json
                assert 'id' in tree_data
                assert tree_data['id'] == root_id
            else:
                pytest.skip("API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ BOM –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        end_time = time.time()
        total_time = end_time - start_time
        average_time_per_request = total_time / 10
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ –±–æ–ª–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–µ—Ä–µ–≤–∞
        assert average_time_per_request < 0.5, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ BOM: {average_time_per_request:.3f}s –Ω–∞ –∑–∞–ø—Ä–æ—Å"
        
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–æ –¥–µ—Ä–µ–≤–æ BOM 10 —Ä–∞–∑ –∑–∞ {total_time:.2f}s (—Å—Ä–µ–¥–Ω–µ–µ: {average_time_per_request:.3f}s –Ω–∞ –∑–∞–ø—Ä–æ—Å)")
    
    def test_concurrent_bom_modifications(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è BOM"""
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç BOM
        base_data = {
            'part_number': f'BOM-CONC-BASE-{timestamp}',
            'name': '–ë–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞',
            'description': '–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'
        }
        
        response = client.post('/api/bom/items', 
                             json=base_data, 
                             headers=auth_headers_admin)
        assert response.status_code == 201
        base_id = response.json['id']
        
        results = []
        
        def create_child_bom(thread_id):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ BOM –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            try:
                data = {
                    'part_number': f'BOM-CONC-CHILD-{timestamp}-{thread_id:03d}',
                    'name': f'–î–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç {thread_id}',
                    'parent_id': base_id,
                    'quantity': 1.0 + thread_id * 0.1
                }
                
                response = client.post('/api/bom/items', 
                                     json=data, 
                                     headers=auth_headers_admin)
                
                return {
                    'thread_id': thread_id,
                    'status_code': response.status_code,
                    'success': response.status_code == 201,
                    'bom_id': response.json.get('id') if response.status_code == 201 else None
                }
            except Exception as e:
                return {
                    'thread_id': thread_id,
                    'error': str(e),
                    'success': False
                }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 15 –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=15) as executor:
            futures = [executor.submit(create_child_bom, i) for i in range(1, 16)]
            
            for future in as_completed(futures):
                results.append(future.result())
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_creations = len([r for r in results if r.get('success')])
        errors = [r for r in results if not r.get('success')]
        
        assert successful_creations >= 12, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ BOM: {len(errors)} –∏–∑ 15"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
        bom_ids = [r['bom_id'] for r in results if r.get('bom_id')]
        assert len(bom_ids) == len(set(bom_ids)), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BOM"
        
        print(f"\nüìä –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ BOM: {successful_creations}/15 —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f}s")


@pytest.mark.performance
@pytest.mark.slow  
class TestSystemIntegrationPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def test_full_workflow_performance(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        start_time = time.time()
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        route_data = {
            'name': f'–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç {timestamp}',
            'route_number': f'TR-COMPLEX-{timestamp}',
            'description': '–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
        }
        
        response = client.post('/api/routes', 
                             json=route_data, 
                             headers=auth_headers_admin)
        assert response.status_code == 201
        route_id = response.json['id']
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation_data = {
            'name': f'–û–ø–µ—Ä–∞—Ü–∏—è {timestamp}',
            'operation_code': f'OP-{timestamp}',
            'operation_type': 'machining',
            'setup_time': 10.0,
            'cycle_time': 5.0
        }
        
        response = client.post('/api/operations', 
                             json=operation_data, 
                             headers=auth_headers_admin)
        
        if response.status_code == 201:
            operation_id = response.json['id']
            
            # 3. –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
            link_data = {
                'operation_id': operation_id,
                'sequence_number': 1
            }
            
            response = client.post(f'/api/routes/{route_id}/operations',
                                 json=link_data,
                                 headers=auth_headers_admin)
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ BOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        bom_root_data = {
            'part_number': f'BOM-COMPLEX-{timestamp}',
            'name': f'–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–±–æ—Ä–∫–∞ {timestamp}',
            'technological_route_id': route_id,
            'is_assembly': True
        }
        
        response = client.post('/api/bom/items', 
                             json=bom_root_data, 
                             headers=auth_headers_admin)
        assert response.status_code == 201
        bom_root_id = response.json['id']
        
        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 20 –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(20):
            child_data = {
                'part_number': f'BOM-PART-{timestamp}-{i:03d}',
                'name': f'–î–µ—Ç–∞–ª—å {i+1}',
                'parent_id': bom_root_id,
                'quantity': 1.0 + i * 0.1
            }
            
            response = client.post('/api/bom/items', 
                                 json=child_data, 
                                 headers=auth_headers_admin)
            assert response.status_code == 201
        
        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        response = client.get(f'/api/routes/{route_id}', 
                            headers=auth_headers_admin)
        assert response.status_code == 200
        
        response = client.get(f'/api/bom/{bom_root_id}/tree', 
                            headers=auth_headers_admin)
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ü–æ–ª–Ω—ã–π workflow –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥
        assert total_time < 10.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π workflow: {total_time:.2f}s"
        
        print(f"\nüìä –ü–æ–ª–Ω—ã–π workflow –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {total_time:.2f}s")
    
    def test_database_load_simulation(self, client, auth_headers_admin):
        """–¢–µ—Å—Ç: —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º 100 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ 300 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BOM
        routes_created = 0
        bom_items_created = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        for i in range(100):
            data = {
                'name': f'–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç {i+1}',
                'route_number': f'TR-LOAD-{timestamp}-{i+1:03d}',
                'description': f'–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #{i+1}'
            }
            
            response = client.post('/api/routes', 
                                 json=data, 
                                 headers=auth_headers_admin)
            if response.status_code == 201:
                routes_created += 1
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BOM
        for i in range(300):
            data = {
                'part_number': f'BOM-LOAD-{timestamp}-{i+1:03d}',
                'name': f'–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç BOM {i+1}',
                'description': f'–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #{i+1}',
                'quantity': 1.0 + (i % 10) * 0.1
            }
            
            response = client.post('/api/bom/items', 
                                 json=data, 
                                 headers=auth_headers_admin)
            if response.status_code == 201:
                bom_items_created += 1
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
        read_start = time.time()
        
        for _ in range(20):
            response = client.get('/api/routes?per_page=50', 
                                headers=auth_headers_admin)
            assert response.status_code == 200
            
            response = client.get('/api/bom?per_page=50', 
                                headers=auth_headers_admin)
            assert response.status_code == 200
        
        read_end = time.time()
        read_time = read_end - read_start
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        create_time = read_start - start_time
        average_create_time = create_time / (routes_created + bom_items_created)
        average_read_time = read_time / 40  # 20 –∑–∞–ø—Ä–æ—Å–æ–≤ * 2 —Ç–∏–ø–∞
        
        print(f"\nüìä –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç:")
        print(f"  - –°–æ–∑–¥–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {routes_created}/100")
        print(f"  - –°–æ–∑–¥–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BOM: {bom_items_created}/300")
        print(f"  - –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {create_time:.2f}s (—Å—Ä–µ–¥–Ω–µ–µ: {average_create_time:.3f}s –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç)")
        print(f"  - –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {read_time:.2f}s (—Å—Ä–µ–¥–Ω–µ–µ: {average_read_time:.3f}s –Ω–∞ –∑–∞–ø—Ä–æ—Å)")
        print(f"  - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        assert average_create_time < 0.2, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: {average_create_time:.3f}s –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç"
        assert average_read_time < 0.1, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ: {average_read_time:.3f}s –Ω–∞ –∑–∞–ø—Ä–æ—Å"
        assert total_time < 60.0, f"–û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–æ: {total_time:.2f}s" 